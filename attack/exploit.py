from attack.ecdsa_hnp import ECDSA, ECDSASolver
from Crypto.PublicKey.ECC import EccKey, EccPoint
from Crypto.PublicKey import ECC

# Format can be PEM, DER or raw bytes
def export_key(private_exponent,path,format="PEM"):
    G = EccPoint(0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66, 0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650, curve="P-521")
    key = EccKey(curve="P-521", d=int(private_exponent), point=G)
    with open(path, "wb") as f:
        f.write(key.export_key(format=format).encode())


def read_pubkey(filename):
    with open(filename, "rb") as f:
        data = f.read()
    if data.startswith(b"-----"):
        return ECC.import_key(data).export_key(format="raw")[1:].hex()
    else:    
        return data.strip()

def recover_pk(lines):
    m = len(lines)
    ecdsa = ECDSA(nbits=521)
    solver = ECDSASolver(ecdsa,lines,m=m)
    pk , result = solver("bkz-enum")
    if result.success:
        return pk
    else:
        return None
